package main
import (
  	"os"
	"io"
  	"flag"
	"strings"
	"github.com/Jeffail/gabs/v2"
	"io/ioutil"
)

func main() {
	var configFile string;
	var tag string;
	var data string;	

	flag.StringVar(&configFile, "config", "./consul-windows-base-cfg/base.hcl", "File to use.")
	flag.StringVar(&tag, "tag", "tag", "tag to use.")
	flag.StringVar(&data, "data", "data", "data to use.")
	flag.Parse()


	var file, err = os.OpenFile(configFile, os.O_RDWR, 0644)
	if existError(err) {
		return
	}
    // File to string
	var buf strings.Builder
	_, erro := io.Copy(&buf, file)
	if existError(erro) {
		return
	}
	s := buf.String()

	jsonParsed, err := gabs.ParseJSON([]byte(s))
	jsonParsed.Set(data, "services", tag)

	// In this first version, this script only inserts data in services\connect\sidecar_service\proxy in future versions, it is necessary to study if it is necessary 
	// to convert this loop into a recursive function to which the address in which the insert is to be performed can be passed.

	for _, child := range jsonParsed.S("services").Children() {
		for _, childconnect := range child.S("connect").Children() {
			for _, childsidecar_service := range childconnect.S("sidecar_service").Children() {
				for _, childproxy := range childsidecar_service.S("proxy").Children() {
					childproxy.Set(data, tag)
				}
			}
		}
	}

    err = ioutil.WriteFile(configFile, []byte(jsonParsed.StringIndent("", "  ")), 0644)

    if existError(err) {
		return
	}
}

func existError(err error) bool {
  if err != nil {
	addToLog(err.Error()+"\n")
    panic(err.Error())
  }
  return (err != nil)
}

func addToLog(message string) bool {
	var log, err_log = os.OpenFile("log.txt", os.O_WRONLY, 0644)

	n, _ := log.Seek(0, os.SEEK_END)

	if _, err_log = log.WriteAt([]byte(message+"\n"), n); err_log != nil {
		panic(err_log)
		return false
    }

 	log.Close()
	return true
}
